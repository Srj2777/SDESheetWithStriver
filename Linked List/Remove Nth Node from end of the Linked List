Approach 1 - 
(Naive Approach) 

ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head==NULL) return head;
        
        int len = 0;
        for(ListNode *curr=head;curr!=NULL;curr=curr->next)
        len++;
        
        if(len<n)
        return head;
        
        // whenever we delete head node and size is 1 and n =1 aslo
        if(len == n){
        ListNode* temp = head;
        return head->next;
            delete temp;
        }
        
        ListNode *curr = head;
        
        for(int i =0;i <(len-n-1)&&curr!=NULL;i++)
        curr = curr->next;
        
        ListNode* temp = curr->next;
        curr->next = curr->next->next;
        delete temp;
        
        return head;
}

We must check that condition when n==1 and len==1;
 TC - O(N) + O(N);
 SP - O(1);
 
 Approach 2 - (Efficient) - Using two pointer 

 ListNode* removeNthFromEnd(ListNode* head, int n) {

           ListNode* temp = new ListNode();
           temp->next= head;
           
           ListNode* fast = temp;
           ListNode* slow = temp;
        
           // first traverse a pointer till n(nth node from end)
           for(int i=0; i<n;i++){
               fast = fast->next;
           }
           
           while(fast->next!=NULL){
               fast=fast->next;
               slow=slow->next;
           }
           slow->next = slow->next->next;
           return temp->next;
}

TC - O(N) ;
SP - O(1) ;
