Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.

It is guaranteed that the node to be deleted is not a tail node in the list.

        // Here Only Deleted Node is Given That Why We Copy The Next Node Value to Node Value, 
        //  Then Delete Next Node.
        
        node->val = node->next->val;
        node->next = node->next->next;
        return ;
        
        
                  OR
        
        ListNode* temp = node->next;
        node->val = temp->val;
        node->next = temp->next;
        delete temp;

It's Time Complexity - O(1)



IF HEAD IS GIVEN THEN ......

        if(head==NULL) return head;
        
        if(head->data==node->data){
            Node* temp = head->next;
            delete head;
            return temp;
        }
        ListNode* curr = head;
        while(curr!=NULL){
            if(curr->next->data==node->data){
                ListNode* node = curr->next;
                curr->next->next = curr->next;
                delete node;
            }
            curr = curr->next;
        }
        return head;
